#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spellcard 2"]
#Text["Star Sign [Universal Law of Gravitation]"]
#include "script/default_system/Default_ShotConst.txt"
let objBoss;
let frame = 0;


@Event{
  alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
      SetScriptResult(500);
    }
    case (EV_REQUEST_TIMER) {
      SetScriptResult(60);
    }
    case (EV_REQUEST_SPELL_SCORE) {
      SetScriptResult(1000000);
    }

}


@Initialize{
  objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
  ObjEnemy_Regist(objBoss);
  let imgExRumia = GetCurrentScriptDirectory() ~ "ExRumia.png";
  ObjPrim_SetTexture(objBoss, imgExRumia);
  ObjSprite2D_SetSourceRect(objBoss, 64, 1, 127, 64);
  ObjSprite2D_SetDestCenter(objBoss);
  ObjMove_SetDestAtFrame(objBoss, GetCenterX(), 60, 60);

  TFinalize;
}
let p1, p2;
@MainLoop{
  ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);
  ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);
  if (frame == 61) {
    p1 = CreatePlanet(GetCenterX() - 72, GetCenterY());
    p2 = CreatePlanet(GetCenterX() + 144, GetCenterY());
  }
  if (frame > 61) { // We have finished moving
    TMovePlanet(p1);
    TMovePlanet(p2);
    TFire;
  }
  frame++;
  yield;
}


function CreatePlanet(x, y) {
  const int X = GetCenterX(), Y = GetCenterY();
  let planet = CreateShotA1(x, y, 0, 0, DS_BALL_L_RED, 0); 
  Obj_SetValue(planet, "radius", sqrt((y - Y)^2 + (x - X)^2));
  return planet;
}


task TMovePlanet(planet) {
  // get the angle between current position and origin
  let X = GetCenterX(), Y = GetCenterY(); // origin;
  let x = ObjMove_GetX(planet), y = ObjMove_GetY(planet);
  WriteLog(ToString(x) ~ "," ~ ToString(y));
  let angle = 0;
  if (x == X) {
    if (y > Y) angle = 90;
    else angle = 270;
  } else angle = atan2(y - Y, x - X);
  angle = angle + 0.25;
  WriteLog(ToString(angle));
  if (angle >= 360) angle -= 360;
  let r = Obj_GetValue(planet, "radius");
  let nx = cos(angle) * r + X, ny = sin(angle) * r + Y;
  WriteLog(ToString(nx) ~ "," ~ ToString(ny));
  ObjMove_SetPosition(planet, nx, ny);
}


task TFire {
  
}


task TFinalize {
  while (ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) yield;
  Obj_Delete(objBoss);
  DeleteShotAll(TYPE_ALL, TYPE_IMMEDIATE);
  SetAutoDeleteObject(true);
  CloseScript(GetOwnScriptID());
  return;
}


function GetTouchedEdge(x, y) {
//  WriteLog("Checking touched edge: position is " ~ ToString(x) ~ ", " ~ ToString(y));
  if (x <= 1) return 3; // left
  else if (y <= 1) return 1; // top
  else if (y >= GetStgFrameHeight() - 1) return 0; // bottom, change this value to 2 if you want to bounce at bottom also
  else if (x >= GetStgFrameWidth() - 1) return 4; // right
  else return 0; // not touched
}


function GetCenterX(){
  return GetStgFrameWidth() / 2;
}


function GetCenterY(){
  return GetStgFrameHeight() / 2;
}

