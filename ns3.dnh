#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Nonspell 3"]
#Text["Nonspell 3"]
#include "script/default_system/Default_ShotConst.txt"
#include "script/test/stl/stl_dict.dnh"
let objBoss;
let frame = 0;


@Event{
  alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
      SetScriptResult(500);
    }
    case (EV_REQUEST_TIMER) {
      SetScriptResult(60);
    }
    case (EV_REQUEST_SPELL_SCORE) {
      SetScriptResult(1000000);
    }

}


@Initialize{
  objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
  ObjEnemy_Regist(objBoss);
  let imgExRumia = GetCurrentScriptDirectory() ~ "ExRumia.png";
  ObjPrim_SetTexture(objBoss, imgExRumia);
  ObjSprite2D_SetSourceRect(objBoss, 64, 1, 127, 64);
  ObjSprite2D_SetDestCenter(objBoss);
  ObjMove_SetDestAtFrame(objBoss, GetCenterX(), 60, 60);

  TFinalize;
}
let ofs = 0;
@MainLoop{
  ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);
  ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);

  if (frame >= 60) { // We have finished moving
     if (frame % 400 == 60) {
       TDraw(ofs);
       ofs++;
     }
  }
  frame++;
  yield;
}


task TDraw(ofs) {
  // r =  cos (5/7 theta), theta in [0, 7pi]
  if (ObjEnemy_GetInfo(objBoss, INFO_LIFE) <= 0) return;
  let theta;
  let bullets = [];
  for (theta = 0.0; theta < 7 * 180; theta += 10) {
    let r = 150 * cos(5 / 7 * theta);
    let p = GetXYCoord(r, theta);
    let objBullet = CreateShotA1(ObjDict_Get(p, "x") + GetCenterX(), ObjDict_Get(p, "y") + GetCenterY(), 
                                 0, rand_int(0, 360), DS_BUTTERFLY_RED + ofs % 8, 0);
    bullets = bullets ~ [objBullet];
    wait(1);
  }
  wait(20);
  for each (let bullet in bullets) ObjMove_SetSpeed(bullet, 2);
}


function GetXYCoord(r, theta) {
  // returns the X-Y coordinate of (r, theta) in polar coordinates
  // the coordinate is returned in a dict
  let point = ObjDict_Create();
  ObjDict_Set(point, "x", r * cos(theta));
  ObjDict_Set(point, "y", r * sin(theta));
  return point;
}



task TFinalize {
  while (ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) yield;
  Obj_Delete(objBoss);
  DeleteShotAll(TYPE_ALL, TYPE_IMMEDIATE);
  SetAutoDeleteObject(true);
  CloseScript(GetOwnScriptID());
  return;
}


function GetTouchedEdge(x, y) {
//  WriteLog("Checking touched edge: position is " ~ ToString(x) ~ ", " ~ ToString(y));
  if (x <= 1) return 3; // left
  else if (y <= 1) return 1; // top
  else if (y >= GetStgFrameHeight() - 1) return 0; // bottom, change this value to 2 if you want to bounce at bottom also
  else if (x >= GetStgFrameWidth() - 1) return 4; // right
  else return 0; // not touched
}


function GetCenterX(){
  return GetStgFrameWidth() / 2;
}


function GetCenterY(){
  return GetStgFrameHeight() / 2;
}
